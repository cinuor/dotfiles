## 快捷键修改
# Ctrl+g作为前缀
unbind C-b
set    -g  prefix C-g
bind   C-g send-prefix

# 颜色定义
color_dark0_hard="#1d2021"
color_dark0="#282828"
color_dark0_soft="#32302f"
color_dark1="#3c3836"
color_dark2="#504945"
color_dark3="#665c54"
color_dark4="#7c6f64"
color_light0_hard="#f9f5d7"
color_light0="#fbf1c7"
color_light0_soft="#f2e5bc"
color_light1="#ebdbb2"
color_light2="#d5c4a1"
color_light3="#bdae93"
color_light4="#a89984"
color_bright_red="#fb4934"
color_bright_green="#b8bb26"
color_bright_yellow="#fabd2f"
color_bright_blue="#83a598"
color_bright_purple="#d3869b"
color_bright_aqua="#8ec07c"
color_bright_orange="#fe8019"
color_neutral_red="#cc241d"
color_neutral_green="#98971a"
color_neutral_yellow="#d79921"
color_neutral_blue="#458588"
color_neutral_purple="#b16286"
color_neutral_aqua="#689d6a"
color_neutral_orange="#d65d0e"
color_faded_red="#9d0006"
color_faded_green="#79740e"
color_faded_yellow="#b57614"
color_faded_blue="#076678"
color_faded_purple="#8f3f71"
color_faded_aqua="#427b58"
color_faded_orange="#af3a03"
color_dark_red_hard="#792329"
color_dark_red="#722529"
color_dark_red_soft="#7b2c2f"
color_light_red_hard="#fc9690"
color_light_red="#fc9487"
color_light_red_soft="#f78b7f"
color_dark_green_hard="#5a633a"
color_dark_green="#62693e"
color_dark_green_soft="#686d43"
color_light_green_hard="#d3d6a5"
color_light_green="#d5d39b"
color_light_green_soft="#cecb94"
color_dark_aqua_hard="#3e4934"
color_dark_aqua="#49503b"
color_dark_aqua_soft="#525742"
color_light_aqua_hard="#e6e9c1"
color_light_aqua="#e8e5b5"
color_light_aqua_soft="#e1dbac"
color_gray="#928374"

color_window_status_fg="$color_light4"
color_window_status_bg="$color_dark0_hard"
color_window_status_current_fg="$color_dark0_hard"
color_window_status_current_bg="$color_bright_blue"
color_window_status_activity_fg="$color_dark0_hard"
color_window_status_activity_bg="$color_bright_yellow"
color_message_fg="$color_dark0_hard"
color_message_bg="$color_bright_yellow"
color_pane_border="$color_bright_blue"
color_pane_active_border="$color_bright_yellow"

color_off_window_status_fg="$color_light4"
color_off_window_status_bg="$color_dark0_hard"
color_off_window_status_current_fg="$color_dark0_hard"
color_off_window_status_current_bg="$color_bright_red"

# general 设置 {
    # set  -g  default-command      /usr/bin/zsh
    set  -g  automatic-rename   off # 禁止根据当前进程自动命名
    set  -g  visual-bell        off # 禁止视觉警告
    set  -sg escape-time        50
    set  -g  focus-events       on
    set  -s  set-clipboard      on
    set  -g  default-terminal   "screen-256color"
    set  -g  mouse              on  # 鼠标支持
    set  -g  base-index         1   # 设置窗口的起始下标为1
    set  -g  pane-base-index    1   # 设置面板的起始下标为1
    set  -g  renumber-windows   on
    set  -g  history-limit      5000
    setw -g  mode-keys          vi  # 开启vi风格后，支持vi的C-d、C-u、hjkl等快捷键
    set-option -a terminal-features 'xterm-256color:RGB'
# }

# theme {
    # 状态栏
    set  -g  status-interval              1                       # 状态栏刷新时间
    set  -g  status-position              top                     # statusline在最上面
    set  -g  status-justify               left                    # 状态栏列表左对齐
    setw -g  monitor-activity             on                      # 非当前窗口有内容更新时在状态栏通知
    set  -g  status-bg                    $color_dark0_hard               # 设置状态栏背景黑色
    set  -g  status-fg                    $color_light4               # 设置状态栏前景白色
    set  -g  status-left                  "#[fg=$color_bright_blue] #S │"    # 状态栏左侧内容
    set  -g  status-right                 "#{network_speed} │ #[fg=$color_light4,bg=$color_window_status_bg]%Y-%m-%d#[fg=$color_bright_red,bg=$color_window_status_bg]:#[fg=$color_light4,bg=$color_window_status_bg]%H:%M:%S "
    set  -g  status-left-length           300                     # 状态栏左边长度300
    set  -g  status-right-length          500                     # 状态栏左边长度500
    set  -wg window-status-format         " #I:#W "               # 状态栏窗口名称格式
    set  -wg window-status-current-format " #I:#W#F "             # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
    set  -wg window-status-separator      " "                     # 状态栏窗口名称之间的间隔
    set  -wg window-status-style          "fg=$color_window_status_fg,bg=$color_window_status_bg"
    set  -wg window-status-current-style  "fg=$color_window_status_current_fg,bg=$color_window_status_current_bg" # 状态栏当前窗口名称的样式
    set  -wg window-status-activity-style "fg=$color_window_status_activity_fg,bg=$color_window_status_activity_bg"
    set  -g  message-style                "fg=$color_message_fg,bg=$color_message_bg" # 指定消息通知的前景、后景色
    set  -g  pane-border-style            "fg=$color_pane_border"            # pane border 颜色
    set  -g  pane-active-border-style     "fg=$color_pane_active_border"            # 当前pane的border颜色
# }


# 按键绑定 {
    bind r source-file ~/.tmux.conf \; display-message "Config reloaded.." # 新增r命令重载配置
    bind -r Space resize-pane -Z # `space`键缩放pane
# }

# pane {
    unbind '"'
    bind - splitw -v -c '#{pane_current_path}'                              # `-` 垂直方向新增面板，默认进入当前目录
    unbind %
    bind \\ splitw -h -c '#{pane_current_path}'                             # `\` 水平方向新增面板，默认进入当前目录

    # 面板调整 {
        bind -r ^k resizep -U 5                                             # 绑定Ctrl+k为往↑调整面板边缘10个单元格
        bind -r ^j resizep -D 5                                             # 绑定Ctrl+j为往↓调整面板边缘10个单元格
        bind -r ^h resizep -L 5                                             # 绑定Ctrl+h为往←调整面板边缘10个单元格
        bind -r ^l resizep -R 5                                             # 绑定Ctrl+l为往→调整面板边缘10个单元格
    # }

    # 面板切换 {
        is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

        bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
        bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
        bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
        bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

        bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
        bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
        bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
        bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'
    # }

    bind x confirm-before -p "kill current panes? (y/n)" "kill-pane"  # 询问是否关闭当前面板
    bind X confirm-before -p "kill other panes? (y/n)" "kill-pane -a" # 询问是否关闭其他面板
# }

# window {
    bind c new-window                                                       # 新增窗口
    bind C new-window -c "#{pane_current_path}"                             # 打开当前pane的cwd成为新窗口
    bind k confirm-before -p "kill current windows? (y/n)" "kill-window"    # 询问是否关闭当前窗口
    bind K confirm-before -p "kill current windows? (y/n)" "kill-window -a" # 询问是否关闭其他窗口
    bind -n S-Left previous-window                                          # 按住shift + left 切换到上一个窗口
    bind -n S-Right next-window                                             # shift + right 下一个窗口
    bind -n M-Left swap-window -t -1\; select-window -t -1                  # 向前移动窗口
    bind -n M-Right swap-window -t +1\; select-window -t +1                 # 向后移动窗口
    bind e command-prompt -N -p "Select Window: " "if-shell -F '%1' 'selectw -t %1' 'display-message -d 2000 \"Please Input Window Index\"'"
    bind -r Tab last-window                                                 # 回到最近的window
# }

# session {
    bind C-q confirm-before -p "kill current session #S? (y/n)" "kill-session"                          # 询问是否删除当前session
    bind-key o command-prompt -p "Enter new session name:" "new-session -s '%%'; switch-client -t '%%'" # 创建新的session
# }

# vi模式按键绑定 {
    bind Escape copy-mode                                                              # 绑定esc键为进入复制模式
    bind -T copy-mode-vi v send-keys -X begin-selection                                # 绑定v键为开始选择文本
    bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'clipboard-provider copy' # 使用clipboard-provider拷贝文本
    bind p run "tmux set-buffer \"$(clipboard-provider paste)\"; tmux paste-buffer -p" # 使用clipboard-provider拷贝文本
# }

# 鼠标操作 {
    unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
    bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'clipboard-provider copy' # 拖拽拷贝

    unbind-key MouseDown2Pane
    bind-key -n MouseDown2Pane run "tmux set-buffer \"$(clipboard-provider paste)\"; tmux paste-buffer -p" # 中键粘贴
# }

# tmux嵌套设置 {
    bind -T root F12  \
        set prefix None \;\
        set key-table off \;\
        set window-status-style "fg=$color_off_window_status_fg,bg=$color_off_window_status_bg" \;\
        set window-status-current-format " #I:#W#F " \;\
        set window-status-current-style "fg=$color_off_window_status_current_fg,bg=$color_off_window_status_current_bg" \;\
        if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
        refresh-client -S \;\

    bind -T off F12 \
      set -u prefix \;\
      set -u key-table \;\
      set -u window-status-style \;\
      set -u window-status-current-style \;\
      set -u window-status-current-format \;\
      refresh-client -S
# }

# plugins {
    set -g @plugin 'tmux-plugins/tpm'
    set -g @plugin 'tmux-plugins/tmux-copycat'
    set -g @plugin 'tmux-plugins/tmux-resurrect'
    set -g @plugin 'tmux-plugins/tmux-continuum'
    set -g @plugin 'minhdanh/tmux-network-speed'


    # net speed
    set -g @network_speed_interface 'eth0'
    set -g @network_speed_upload_color "#[fg=$color_bright_blue]"
    set -g @network_speed_download_color "#[fg=$color_bright_yellow]"
    set -g @network_speed_format '%5.2f'


    run '~/.tmux/plugins/tpm/tpm'
# }
